{
  "version": 3,
  "sources": ["../src/extension.ts", "../src/core/AutoHideExtension.ts", "../src/types/index.ts", "../src/config/ConfigurationManager.ts", "../src/core/ContextManager.ts", "../src/utils/StatusBarManager.ts", "../src/panels/BasePanelController.ts", "../src/panels/SidebarController.ts", "../src/panels/PanelController.ts", "../src/panels/AuxiliaryBarController.ts", "../src/panels/ReferencesController.ts", "../src/panels/CopilotChatController.ts"],
  "sourcesContent": ["import * as vscode from 'vscode';\r\nimport { AutoHideExtension } from './core/AutoHideExtension';\r\n\r\nlet extension: AutoHideExtension | undefined;\r\n\r\n/**\r\n * Extension activation function\r\n */\r\nexport async function activate(context: vscode.ExtensionContext): Promise<void> {\r\n  try {\r\n    extension = new AutoHideExtension();\r\n    await extension.activate(context);\r\n    \r\n    console.log('Auto Hide Enhanced extension is now active!');\r\n  } catch (error) {\r\n    console.error('Failed to activate Auto Hide Enhanced extension:', error);\r\n    vscode.window.showErrorMessage(\r\n      `Auto Hide Enhanced: Failed to activate extension. ${error}`\r\n    );\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Extension deactivation function\r\n */\r\nexport async function deactivate(): Promise<void> {\r\n  try {\r\n    if (extension) {\r\n      await extension.deactivate();\r\n      extension = undefined;\r\n    }\r\n    \r\n    console.log('Auto Hide Enhanced extension has been deactivated');\r\n  } catch (error) {\r\n    console.error('Error during Auto Hide Enhanced extension deactivation:', error);\r\n  }\r\n}\r\n\r\n/**\r\n * Get the extension instance (for testing purposes)\r\n */\r\nexport function getExtensionInstance(): AutoHideExtension | undefined {\r\n  return extension;\r\n}\r\n", "import * as vscode from 'vscode';\r\nimport {\r\n  IAutoHideExtension,\r\n  IConfigurationManager,\r\n  IContextManager,\r\n  IPanelController,\r\n  IStatusBarManager,\r\n  PanelType,\r\n  ExtensionConfig,\r\n  ContextState,\r\n  PanelStateChangeEvent,\r\n  COMMANDS,\r\n} from '../types';\r\nimport { ConfigurationManager } from '../config/ConfigurationManager';\r\nimport { ContextManager } from './ContextManager';\r\nimport { StatusBarManager } from '../utils/StatusBarManager';\r\nimport {\r\n  SidebarController,\r\n  PanelController,\r\n  AuxiliaryBarController,\r\n  ReferencesController,\r\n  CopilotChatController,\r\n} from '../panels';\r\n\r\n/**\r\n * Main extension class that coordinates all components\r\n */\r\nexport class AutoHideExtension implements IAutoHideExtension {\r\n  private _configManager: IConfigurationManager;\r\n  private _contextManager: IContextManager;\r\n  private _statusBarManager: IStatusBarManager;\r\n  private _panelControllers: Map<PanelType, IPanelController>;\r\n  private _disposables: vscode.Disposable[] = [];\r\n  private _isActivated = false;\r\n\r\n  constructor() {\r\n    this._configManager = new ConfigurationManager();\r\n    this._contextManager = new ContextManager();\r\n    this._statusBarManager = new StatusBarManager();\r\n    this._panelControllers = new Map();\r\n\r\n    this.initializePanelControllers();\r\n    this.setupEventListeners();\r\n  }\r\n\r\n  /**\r\n   * Configuration manager\r\n   */\r\n  public get configManager(): IConfigurationManager {\r\n    return this._configManager;\r\n  }\r\n\r\n  /**\r\n   * Context manager\r\n   */\r\n  public get contextManager(): IContextManager {\r\n    return this._contextManager;\r\n  }\r\n\r\n  /**\r\n   * Panel controllers\r\n   */\r\n  public get panelControllers(): Map<PanelType, IPanelController> {\r\n    return this._panelControllers;\r\n  }\r\n\r\n  /**\r\n   * Status bar manager\r\n   */\r\n  public get statusBarManager(): IStatusBarManager {\r\n    return this._statusBarManager;\r\n  }\r\n\r\n  /**\r\n   * Activate the extension\r\n   */\r\n  public async activate(context: vscode.ExtensionContext): Promise<void> {\r\n    if (this._isActivated) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Register all disposables with the extension context\r\n      context.subscriptions.push(\r\n        this._configManager,\r\n        this._contextManager,\r\n        this._statusBarManager,\r\n        ...Array.from(this._panelControllers.values()),\r\n        ...this._disposables\r\n      );\r\n\r\n      // Register commands\r\n      this.registerCommands(context);\r\n\r\n      // Migrate old configuration if needed\r\n      await this._configManager.migrateOldConfiguration();\r\n\r\n      // Initialize status bar\r\n      this.updateStatusBar();\r\n\r\n      // Hide panels on startup if configured\r\n      const config = this._configManager.getConfig();\r\n      if (config.hideOnStartup) {\r\n        await this.hideAll();\r\n      }\r\n\r\n      this._isActivated = true;\r\n      console.log('Auto Hide Enhanced extension activated successfully');\r\n\r\n    } catch (error) {\r\n      console.error('Failed to activate Auto Hide Enhanced extension:', error);\r\n      vscode.window.showErrorMessage(\r\n        `Auto Hide Enhanced: Failed to activate extension. ${error}`\r\n      );\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate the extension\r\n   */\r\n  public async deactivate(): Promise<void> {\r\n    if (!this._isActivated) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Show all panels before deactivating\r\n      await this.showAll();\r\n\r\n      // Dispose of all resources\r\n      this._disposables.forEach(d => d.dispose());\r\n      this._disposables = [];\r\n\r\n      this._isActivated = false;\r\n      console.log('Auto Hide Enhanced extension deactivated');\r\n\r\n    } catch (error) {\r\n      console.error('Error during extension deactivation:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Hide all configured panels\r\n   */\r\n  public async hideAll(): Promise<void> {\r\n    const config = this._configManager.getConfig();\r\n    const context = this._contextManager.getContext();\r\n\r\n    if (!config.enabled) {\r\n      return;\r\n    }\r\n\r\n    const hidePromises: Promise<void>[] = [];\r\n\r\n    for (const [panelType, controller] of this._panelControllers) {\r\n      const panelConfig = config.panels[panelType];\r\n      if (panelConfig.enabled && controller.canHide(context)) {\r\n        hidePromises.push(\r\n          controller.hideWithDelay(panelConfig.delay, context)\r\n        );\r\n      }\r\n    }\r\n\r\n    await Promise.allSettled(hidePromises);\r\n    this.updateStatusBar();\r\n  }\r\n\r\n  /**\r\n   * Show all panels\r\n   */\r\n  public async showAll(): Promise<void> {\r\n    const showPromises: Promise<void>[] = [];\r\n\r\n    for (const controller of this._panelControllers.values()) {\r\n      if (controller.isHidden) {\r\n        showPromises.push(controller.show());\r\n      }\r\n    }\r\n\r\n    await Promise.allSettled(showPromises);\r\n    this.updateStatusBar();\r\n  }\r\n\r\n  /**\r\n   * Toggle auto-hide for a specific panel type\r\n   */\r\n  public async togglePanel(panelType: PanelType): Promise<void> {\r\n    const controller = this._panelControllers.get(panelType);\r\n    if (!controller) {\r\n      throw new Error(`No controller found for panel type: ${panelType}`);\r\n    }\r\n\r\n    await controller.toggle();\r\n    this.updateStatusBar();\r\n  }\r\n\r\n  /**\r\n   * Initialize panel controllers\r\n   */\r\n  private initializePanelControllers(): void {\r\n    this._panelControllers.set(PanelType.SIDEBAR, new SidebarController());\r\n    this._panelControllers.set(PanelType.AUXILIARY_BAR, new AuxiliaryBarController());\r\n    this._panelControllers.set(PanelType.PANEL, new PanelController());\r\n    this._panelControllers.set(PanelType.REFERENCES, new ReferencesController());\r\n    this._panelControllers.set(PanelType.COPILOT_CHAT, new CopilotChatController());\r\n  }\r\n\r\n  /**\r\n   * Set up event listeners\r\n   */\r\n  private setupEventListeners(): void {\r\n    // Listen for configuration changes\r\n    this._disposables.push(\r\n      this._configManager.onConfigurationChanged((config) => {\r\n        this.handleConfigurationChange(config);\r\n      })\r\n    );\r\n\r\n    // Listen for context changes\r\n    this._disposables.push(\r\n      this._contextManager.onContextChanged((context) => {\r\n        this.handleContextChange(context);\r\n      })\r\n    );\r\n\r\n    // Listen for panel state changes\r\n    for (const controller of this._panelControllers.values()) {\r\n      if ('onStateChanged' in controller) {\r\n        this._disposables.push(\r\n          (controller as any).onStateChanged((event: PanelStateChangeEvent) => {\r\n            this.handlePanelStateChange(event);\r\n          })\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Register extension commands\r\n   */\r\n  private registerCommands(context: vscode.ExtensionContext): void {\r\n    const commands = [\r\n      {\r\n        command: COMMANDS.TOGGLE_SIDEBAR,\r\n        handler: () => this.togglePanel(PanelType.SIDEBAR),\r\n      },\r\n      {\r\n        command: COMMANDS.TOGGLE_AUXILIARY_BAR,\r\n        handler: () => this.togglePanel(PanelType.AUXILIARY_BAR),\r\n      },\r\n      {\r\n        command: COMMANDS.TOGGLE_PANEL,\r\n        handler: () => this.togglePanel(PanelType.PANEL),\r\n      },\r\n      {\r\n        command: COMMANDS.TOGGLE_REFERENCES,\r\n        handler: () => this.togglePanel(PanelType.REFERENCES),\r\n      },\r\n      {\r\n        command: COMMANDS.TOGGLE_COPILOT_CHAT,\r\n        handler: () => this.togglePanel(PanelType.COPILOT_CHAT),\r\n      },\r\n      {\r\n        command: COMMANDS.TOGGLE_ALL,\r\n        handler: () => this.toggleAllPanels(),\r\n      },\r\n      {\r\n        command: COMMANDS.SHOW_ALL,\r\n        handler: () => this.showAll(),\r\n      },\r\n      {\r\n        command: COMMANDS.HIDE_ALL,\r\n        handler: () => this.hideAll(),\r\n      },\r\n    ];\r\n\r\n    for (const { command, handler } of commands) {\r\n      const disposable = vscode.commands.registerCommand(command, handler);\r\n      context.subscriptions.push(disposable);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggle all panels (smart toggle based on current state)\r\n   */\r\n  private async toggleAllPanels(): Promise<void> {\r\n    const hiddenCount = Array.from(this._panelControllers.values())\r\n      .filter(controller => controller.isHidden).length;\r\n    \r\n    const totalEnabled = Object.values(this._configManager.getConfig().panels)\r\n      .filter(config => config.enabled).length;\r\n\r\n    // If more than half are hidden, show all; otherwise hide all\r\n    if (hiddenCount > totalEnabled / 2) {\r\n      await this.showAll();\r\n    } else {\r\n      await this.hideAll();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle configuration changes\r\n   */\r\n  private handleConfigurationChange(config: ExtensionConfig): void {\r\n    this.updateStatusBar();\r\n    \r\n    // If extension was disabled, show all panels\r\n    if (!config.enabled) {\r\n      this.showAll().catch(error => {\r\n        console.error('Failed to show all panels after disabling extension:', error);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle context changes\r\n   */\r\n  private handleContextChange(_context: ContextState): void {\r\n    // Cancel any pending hide operations if context prevents hiding\r\n    if (this._contextManager.shouldPreventHiding()) {\r\n      for (const controller of this._panelControllers.values()) {\r\n        if ('cancelHide' in controller) {\r\n          (controller as any).cancelHide();\r\n        }\r\n      }\r\n    }\r\n\r\n    this.updateStatusBar();\r\n  }\r\n\r\n  /**\r\n   * Handle panel state changes\r\n   */\r\n  private handlePanelStateChange(event: PanelStateChangeEvent): void {\r\n    this.updateStatusBar();\r\n    \r\n    // Log state change for debugging\r\n    console.debug(`Panel ${event.panelType} ${event.isHidden ? 'hidden' : 'shown'} (${event.reason})`);\r\n  }\r\n\r\n  /**\r\n   * Update the status bar display\r\n   */\r\n  private updateStatusBar(): void {\r\n    const config = this._configManager.getConfig();\r\n    const hiddenPanels = Array.from(this._panelControllers.entries())\r\n      .filter(([, controller]) => controller.isHidden)\r\n      .map(([panelType]) => panelType);\r\n\r\n    this._statusBarManager.update(hiddenPanels, config);\r\n  }\r\n\r\n  /**\r\n   * Get extension statistics\r\n   */\r\n  public getStatistics(): {\r\n    totalPanels: number;\r\n    enabledPanels: number;\r\n    hiddenPanels: number;\r\n    isExtensionEnabled: boolean;\r\n  } {\r\n    const config = this._configManager.getConfig();\r\n    const totalPanels = this._panelControllers.size;\r\n    const enabledPanels = Object.values(config.panels).filter(p => p.enabled).length;\r\n    const hiddenPanels = Array.from(this._panelControllers.values())\r\n      .filter(controller => controller.isHidden).length;\r\n\r\n    return {\r\n      totalPanels,\r\n      enabledPanels,\r\n      hiddenPanels,\r\n      isExtensionEnabled: config.enabled,\r\n    };\r\n  }\r\n}", "import * as vscode from 'vscode';\r\n\r\n/**\r\n * Supported panel types that can be auto-hidden\r\n */\r\nexport enum PanelType {\r\n  SIDEBAR = 'sidebar',\r\n  AUXILIARY_BAR = 'auxiliaryBar',\r\n  PANEL = 'panel',\r\n  REFERENCES = 'references',\r\n  COPILOT_CHAT = 'copilotChat',\r\n}\r\n\r\n/**\r\n * Context information about the current state\r\n */\r\nexport interface ContextState {\r\n  /** Whether a debug session is currently active */\r\n  isDebugging: boolean;\r\n  /** Whether the user is actively selecting text */\r\n  isSelectingText: boolean;\r\n  /** Whether Copilot Chat is currently active */\r\n  isCopilotChatActive: boolean;\r\n  /** The URI scheme of the active editor */\r\n  activeEditorScheme: string | null;\r\n  /** Timestamp of the last user activity */\r\n  lastUserActivity: number;\r\n  /** Whether the user is currently in a text editor */\r\n  isInTextEditor: boolean;\r\n}\r\n\r\n/**\r\n * Configuration for a specific panel type\r\n */\r\nexport interface PanelConfig {\r\n  /** Whether auto-hide is enabled for this panel */\r\n  enabled: boolean;\r\n  /** Delay in milliseconds before hiding the panel */\r\n  delay: number;\r\n}\r\n\r\n/**\r\n * Complete extension configuration\r\n */\r\nexport interface ExtensionConfig {\r\n  /** Global extension enabled state */\r\n  enabled: boolean;\r\n  /** Panel-specific configurations */\r\n  panels: Record<PanelType, PanelConfig>;\r\n  /** Smart behavior settings */\r\n  smart: {\r\n    /** Don't auto-hide during debug sessions */\r\n    respectDebugSessions: boolean;\r\n    /** Don't auto-hide when selecting text */\r\n    respectTextSelection: boolean;\r\n    /** URI schemes where auto-hide should be disabled */\r\n    excludedSchemes: string[];\r\n  };\r\n  /** Hide panels on VSCode startup */\r\n  hideOnStartup: boolean;\r\n  /** Status bar configuration */\r\n  statusBar: {\r\n    /** Show status bar indicator */\r\n    enabled: boolean;\r\n    /** Show count of hidden panels */\r\n    showCounts: boolean;\r\n  };\r\n}\r\n\r\n/**\r\n * Event data for panel state changes\r\n */\r\nexport interface PanelStateChangeEvent {\r\n  /** The panel that changed state */\r\n  panelType: PanelType;\r\n  /** Whether the panel is now hidden */\r\n  isHidden: boolean;\r\n  /** Timestamp of the change */\r\n  timestamp: number;\r\n  /** Reason for the change */\r\n  reason: 'user_action' | 'auto_hide' | 'startup' | 'command';\r\n}\r\n\r\n/**\r\n * Interface for panel controllers\r\n */\r\nexport interface IPanelController {\r\n  /** The type of panel this controller manages */\r\n  readonly panelType: PanelType;\r\n  /** Whether the panel is currently hidden */\r\n  readonly isHidden: boolean;\r\n  /** Hide the panel */\r\n  hide(): Promise<void>;\r\n  /** Show the panel */\r\n  show(): Promise<void>;\r\n  /** Toggle the panel visibility */\r\n  toggle(): Promise<void>;\r\n  /** Hide the panel with a delay */\r\n  hideWithDelay(delayMs: number, context: ContextState): Promise<void>;\r\n  /** Cancel any pending hide operation */\r\n  cancelHide(): void;\r\n  /** Check if the panel can be hidden in the current context */\r\n  canHide(context: ContextState): boolean;\r\n  /** Dispose of resources */\r\n  dispose(): void;\r\n}\r\n\r\n/**\r\n * Interface for the configuration manager\r\n */\r\nexport interface IConfigurationManager {\r\n  /** Get the current configuration */\r\n  getConfig(): ExtensionConfig;\r\n  /** Update a configuration value */\r\n  updateConfig<K extends keyof ExtensionConfig>(\r\n    key: K,\r\n    value: ExtensionConfig[K],\r\n    target?: vscode.ConfigurationTarget\r\n  ): Promise<void>;\r\n  /** Migrate old configuration format to new format */\r\n  migrateOldConfiguration(): Promise<void>;\r\n  /** Listen for configuration changes */\r\n  onConfigurationChanged: vscode.Event<ExtensionConfig>;\r\n  /** Dispose of resources */\r\n  dispose(): void;\r\n}\r\n\r\n/**\r\n * Interface for the context manager\r\n */\r\nexport interface IContextManager {\r\n  /** Get the current context state */\r\n  getContext(): ContextState;\r\n  /** Check if hiding should be prevented based on current context */\r\n  shouldPreventHiding(): boolean;\r\n  /** Listen for context changes */\r\n  onContextChanged: vscode.Event<ContextState>;\r\n  /** Update user activity timestamp */\r\n  updateActivity(): void;\r\n  /** Dispose of resources */\r\n  dispose(): void;\r\n}\r\n\r\n/**\r\n * Interface for the status bar manager\r\n */\r\nexport interface IStatusBarManager {\r\n  /** Update the status bar display */\r\n  update(hiddenPanels: PanelType[], config: ExtensionConfig): void;\r\n  /** Show the status bar item */\r\n  show(): void;\r\n  /** Hide the status bar item */\r\n  hide(): void;\r\n  /** Dispose of resources */\r\n  dispose(): void;\r\n}\r\n\r\n/**\r\n * Main extension interface\r\n */\r\nexport interface IAutoHideExtension {\r\n  /** Configuration manager */\r\n  readonly configManager: IConfigurationManager;\r\n  /** Context manager */\r\n  readonly contextManager: IContextManager;\r\n  /** Panel controllers */\r\n  readonly panelControllers: Map<PanelType, IPanelController>;\r\n  /** Status bar manager */\r\n  readonly statusBarManager: IStatusBarManager;\r\n  /** Hide all configured panels */\r\n  hideAll(): Promise<void>;\r\n  /** Show all panels */\r\n  showAll(): Promise<void>;\r\n  /** Toggle auto-hide for a specific panel type */\r\n  togglePanel(panelType: PanelType): Promise<void>;\r\n  /** Activate the extension */\r\n  activate(context: vscode.ExtensionContext): Promise<void>;\r\n  /** Deactivate the extension */\r\n  deactivate(): Promise<void>;\r\n}\r\n\r\n/**\r\n * Utility type for configuration keys\r\n */\r\nexport type ConfigurationKey = keyof ExtensionConfig | `panels.${PanelType}.enabled` | `panels.${PanelType}.delay`;\r\n\r\n/**\r\n * Command identifiers used by the extension\r\n */\r\nexport const COMMANDS = {\r\n  TOGGLE_SIDEBAR: 'autoHideEnhanced.toggle.sidebar',\r\n  TOGGLE_AUXILIARY_BAR: 'autoHideEnhanced.toggle.auxiliaryBar',\r\n  TOGGLE_PANEL: 'autoHideEnhanced.toggle.panel',\r\n  TOGGLE_REFERENCES: 'autoHideEnhanced.toggle.references',\r\n  TOGGLE_COPILOT_CHAT: 'autoHideEnhanced.toggle.copilotChat',\r\n  TOGGLE_ALL: 'autoHideEnhanced.toggle.all',\r\n  SHOW_ALL: 'autoHideEnhanced.show.all',\r\n  HIDE_ALL: 'autoHideEnhanced.hide.all',\r\n} as const;\r\n\r\n/**\r\n * VSCode commands used for panel management\r\n */\r\nexport const VSCODE_COMMANDS = {\r\n  CLOSE_SIDEBAR: 'workbench.action.closeSidebar',\r\n  CLOSE_AUXILIARY_BAR: 'workbench.action.closeAuxiliaryBar',\r\n  CLOSE_PANEL: 'workbench.action.closePanel',\r\n  CLOSE_REFERENCE_SEARCH: 'closeReferenceSearch',\r\n  TOGGLE_SIDEBAR: 'workbench.action.toggleSidebarVisibility',\r\n  TOGGLE_AUXILIARY_BAR: 'workbench.action.toggleAuxiliaryBar',\r\n  TOGGLE_PANEL: 'workbench.action.togglePanel',\r\n} as const;\r\n\r\n/**\r\n * Configuration section name\r\n */\r\nexport const CONFIG_SECTION = 'autoHideEnhanced';\r\n\r\n/**\r\n * Default configuration values\r\n */\r\nexport const DEFAULT_CONFIG: ExtensionConfig = {\r\n  enabled: true,\r\n  panels: {\r\n    [PanelType.SIDEBAR]: { enabled: true, delay: 450 },\r\n    [PanelType.AUXILIARY_BAR]: { enabled: true, delay: 450 },\r\n    [PanelType.PANEL]: { enabled: true, delay: 300 },\r\n    [PanelType.REFERENCES]: { enabled: true, delay: 0 },\r\n    [PanelType.COPILOT_CHAT]: { enabled: false, delay: 500 },\r\n  },\r\n  smart: {\r\n    respectDebugSessions: true,\r\n    respectTextSelection: true,\r\n    excludedSchemes: ['output', 'debug', 'search-result'],\r\n  },\r\n  hideOnStartup: false,\r\n  statusBar: {\r\n    enabled: true,\r\n    showCounts: true,\r\n  },\r\n};", "import * as vscode from 'vscode';\r\nimport {\r\n  ExtensionConfig,\r\n  IConfigurationManager,\r\n  PanelType,\r\n  CONFIG_SECTION,\r\n  DEFAULT_CONFIG,\r\n} from '../types';\r\n\r\n/**\r\n * Manages extension configuration with support for global and workspace settings\r\n */\r\nexport class ConfigurationManager implements IConfigurationManager {\r\n  private readonly _onConfigurationChanged = new vscode.EventEmitter<ExtensionConfig>();\r\n  public readonly onConfigurationChanged = this._onConfigurationChanged.event;\r\n\r\n  private _disposables: vscode.Disposable[] = [];\r\n  private _currentConfig: ExtensionConfig;\r\n\r\n  constructor() {\r\n    this._currentConfig = this.loadConfiguration();\r\n    \r\n    // Listen for configuration changes\r\n    this._disposables.push(\r\n      vscode.workspace.onDidChangeConfiguration(this.handleConfigurationChange.bind(this))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the current merged configuration\r\n   */\r\n  public getConfig(): ExtensionConfig {\r\n    return { ...this._currentConfig };\r\n  }\r\n\r\n  /**\r\n   * Update a configuration value\r\n   */\r\n  public async updateConfig<K extends keyof ExtensionConfig>(\r\n    key: K,\r\n    value: ExtensionConfig[K],\r\n    target: vscode.ConfigurationTarget = vscode.ConfigurationTarget.Workspace\r\n  ): Promise<void> {\r\n    const config = vscode.workspace.getConfiguration(CONFIG_SECTION);\r\n    \r\n    try {\r\n      await config.update(key, value, target);\r\n      // Configuration will be reloaded via the change event\r\n    } catch (error) {\r\n      console.error(`Failed to update configuration ${String(key)}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update panel-specific configuration\r\n   */\r\n  public async updatePanelConfig(\r\n    panelType: PanelType,\r\n    property: 'enabled' | 'delay',\r\n    value: boolean | number,\r\n    target: vscode.ConfigurationTarget = vscode.ConfigurationTarget.Workspace\r\n  ): Promise<void> {\r\n    const configKey = `${panelType}.${property}`;\r\n    await this.updateConfig(configKey as keyof ExtensionConfig, value as any, target);\r\n  }\r\n\r\n  /**\r\n   * Toggle a panel's enabled state\r\n   */\r\n  public async togglePanelEnabled(\r\n    panelType: PanelType,\r\n    target: vscode.ConfigurationTarget = vscode.ConfigurationTarget.Workspace\r\n  ): Promise<void> {\r\n    const currentValue = this._currentConfig.panels[panelType].enabled;\r\n    await this.updatePanelConfig(panelType, 'enabled', !currentValue, target);\r\n  }\r\n\r\n  /**\r\n   * Reset configuration to defaults\r\n   */\r\n  public async resetToDefaults(\r\n    target: vscode.ConfigurationTarget = vscode.ConfigurationTarget.Workspace\r\n  ): Promise<void> {\r\n    const config = vscode.workspace.getConfiguration(CONFIG_SECTION);\r\n    \r\n    // Reset all configuration keys\r\n    const keys = Object.keys(DEFAULT_CONFIG) as (keyof ExtensionConfig)[];\r\n    for (const key of keys) {\r\n      await config.update(key, undefined, target);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get configuration for a specific panel type\r\n   */\r\n  public getPanelConfig(panelType: PanelType): { enabled: boolean; delay: number } {\r\n    return { ...this._currentConfig.panels[panelType] };\r\n  }\r\n\r\n  /**\r\n   * Check if the extension is globally enabled\r\n   */\r\n  public isEnabled(): boolean {\r\n    return this._currentConfig.enabled;\r\n  }\r\n\r\n  /**\r\n   * Check if a specific panel type is enabled\r\n   */\r\n  public isPanelEnabled(panelType: PanelType): boolean {\r\n    return this._currentConfig.enabled && this._currentConfig.panels[panelType].enabled;\r\n  }\r\n\r\n  /**\r\n   * Get the delay for a specific panel type\r\n   */\r\n  public getPanelDelay(panelType: PanelType): number {\r\n    return this._currentConfig.panels[panelType].delay;\r\n  }\r\n\r\n  /**\r\n   * Check if a URI scheme should be excluded from auto-hide\r\n   */\r\n  public isSchemeExcluded(scheme: string): boolean {\r\n    return this._currentConfig.smart.excludedSchemes.includes(scheme);\r\n  }\r\n\r\n  /**\r\n   * Dispose of resources\r\n   */\r\n  public dispose(): void {\r\n    this._disposables.forEach(d => d.dispose());\r\n    this._disposables = [];\r\n    this._onConfigurationChanged.dispose();\r\n  }\r\n\r\n  /**\r\n   * Load configuration from VSCode settings\r\n   */\r\n  private loadConfiguration(): ExtensionConfig {\r\n    const config = vscode.workspace.getConfiguration(CONFIG_SECTION);\r\n    \r\n    // Build the configuration object with proper defaults\r\n    const loadedConfig: ExtensionConfig = {\r\n      enabled: config.get('enabled', DEFAULT_CONFIG.enabled),\r\n      panels: {\r\n        [PanelType.SIDEBAR]: {\r\n          enabled: config.get('sidebar.enabled', DEFAULT_CONFIG.panels[PanelType.SIDEBAR].enabled),\r\n          delay: config.get('sidebar.delay', DEFAULT_CONFIG.panels[PanelType.SIDEBAR].delay),\r\n        },\r\n        [PanelType.AUXILIARY_BAR]: {\r\n          enabled: config.get('auxiliaryBar.enabled', DEFAULT_CONFIG.panels[PanelType.AUXILIARY_BAR].enabled),\r\n          delay: config.get('auxiliaryBar.delay', DEFAULT_CONFIG.panels[PanelType.AUXILIARY_BAR].delay),\r\n        },\r\n        [PanelType.PANEL]: {\r\n          enabled: config.get('panel.enabled', DEFAULT_CONFIG.panels[PanelType.PANEL].enabled),\r\n          delay: config.get('panel.delay', DEFAULT_CONFIG.panels[PanelType.PANEL].delay),\r\n        },\r\n        [PanelType.REFERENCES]: {\r\n          enabled: config.get('references.enabled', DEFAULT_CONFIG.panels[PanelType.REFERENCES].enabled),\r\n          delay: config.get('references.delay', DEFAULT_CONFIG.panels[PanelType.REFERENCES].delay),\r\n        },\r\n        [PanelType.COPILOT_CHAT]: {\r\n          enabled: config.get('copilotChat.enabled', DEFAULT_CONFIG.panels[PanelType.COPILOT_CHAT].enabled),\r\n          delay: config.get('copilotChat.delay', DEFAULT_CONFIG.panels[PanelType.COPILOT_CHAT].delay),\r\n        },\r\n      },\r\n      smart: {\r\n        respectDebugSessions: config.get('smart.respectDebugSessions', DEFAULT_CONFIG.smart.respectDebugSessions),\r\n        respectTextSelection: config.get('smart.respectTextSelection', DEFAULT_CONFIG.smart.respectTextSelection),\r\n        excludedSchemes: config.get('smart.excludedSchemes', DEFAULT_CONFIG.smart.excludedSchemes),\r\n      },\r\n      hideOnStartup: config.get('hideOnStartup', DEFAULT_CONFIG.hideOnStartup),\r\n      statusBar: {\r\n        enabled: config.get('statusBar.enabled', DEFAULT_CONFIG.statusBar.enabled),\r\n        showCounts: config.get('statusBar.showCounts', DEFAULT_CONFIG.statusBar.showCounts),\r\n      },\r\n    };\r\n\r\n    return loadedConfig;\r\n  }\r\n\r\n  /**\r\n   * Handle configuration changes\r\n   */\r\n  private handleConfigurationChange(event: vscode.ConfigurationChangeEvent): void {\r\n    if (event.affectsConfiguration(CONFIG_SECTION)) {\r\n      const oldConfig = this._currentConfig;\r\n      this._currentConfig = this.loadConfiguration();\r\n      \r\n      // Only fire event if configuration actually changed\r\n      if (JSON.stringify(oldConfig) !== JSON.stringify(this._currentConfig)) {\r\n        this._onConfigurationChanged.fire(this._currentConfig);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Migrate old configuration format to new format\r\n   */\r\n  public async migrateOldConfiguration(): Promise<void> {\r\n    const config = vscode.workspace.getConfiguration();\r\n    const oldSection = 'autoHide';\r\n    \r\n    // Check if old configuration exists\r\n    if (!config.has(oldSection)) {\r\n      return;\r\n    }\r\n\r\n    const oldConfig = config.get(oldSection) as any;\r\n    if (!oldConfig || typeof oldConfig !== 'object') {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Migrate old settings to new format\r\n      const migrations: Array<{ oldKey: string; newKey: string; transform?: (value: any) => any }> = [\r\n        { oldKey: 'autoHideSideBar', newKey: 'sidebar.enabled' },\r\n        { oldKey: 'autoHideAuxiliaryBar', newKey: 'auxiliaryBar.enabled' },\r\n        { oldKey: 'autoHidePanel', newKey: 'panel.enabled' },\r\n        { oldKey: 'autoHideReferences', newKey: 'references.enabled' },\r\n        { oldKey: 'sideBarDelay', newKey: 'sidebar.delay' },\r\n        { oldKey: 'panelDelay', newKey: 'panel.delay' },\r\n        { oldKey: 'hideOnOpen', newKey: 'hideOnStartup' },\r\n      ];\r\n\r\n      for (const migration of migrations) {\r\n        if (oldConfig[migration.oldKey] !== undefined) {\r\n          const value = migration.transform \r\n            ? migration.transform(oldConfig[migration.oldKey])\r\n            : oldConfig[migration.oldKey];\r\n          \r\n          await this.updateConfig(migration.newKey as keyof ExtensionConfig, value);\r\n        }\r\n      }\r\n\r\n      // Show migration notice\r\n      vscode.window.showInformationMessage(\r\n        'Auto Hide Enhanced: Configuration has been migrated to the new format. Please review your settings.',\r\n        'Open Settings'\r\n      ).then(selection => {\r\n        if (selection === 'Open Settings') {\r\n          vscode.commands.executeCommand('workbench.action.openSettings', CONFIG_SECTION);\r\n        }\r\n      });\r\n\r\n    } catch (error) {\r\n      console.error('Failed to migrate old configuration:', error);\r\n      vscode.window.showWarningMessage(\r\n        'Auto Hide Enhanced: Failed to migrate old configuration. Please check your settings manually.'\r\n      );\r\n    }\r\n  }\r\n}", "import * as vscode from 'vscode';\r\nimport { ContextState, IContextManager } from '../types';\r\n\r\n/**\r\n * Manages context state for smart hiding decisions\r\n */\r\nexport class ContextManager implements IContextManager {\r\n  private readonly _onContextChanged = new vscode.EventEmitter<ContextState>();\r\n  public readonly onContextChanged = this._onContextChanged.event;\r\n\r\n  private _disposables: vscode.Disposable[] = [];\r\n  private _currentState: ContextState;\r\n\r\n  constructor() {\r\n    this._currentState = this.createInitialState();\r\n    this.setupEventListeners();\r\n  }\r\n\r\n  /**\r\n   * Get the current context state (implementing IContextManager interface)\r\n   */\r\n  public getContext(): ContextState {\r\n    return { ...this._currentState };\r\n  }\r\n\r\n  /**\r\n   * Get the current context state (alias for getContext)\r\n   */\r\n  public getState(): ContextState {\r\n    return this.getContext();\r\n  }\r\n\r\n  /**\r\n   * Check if hiding should be prevented based on current context\r\n   */\r\n  public shouldPreventHiding(): boolean {\r\n    const state = this._currentState;\r\n    \r\n    // Prevent hiding during debug sessions\r\n    if (state.isDebugging) {\r\n      return true;\r\n    }\r\n\r\n    // Prevent hiding when text is selected\r\n    if (state.isSelectingText) {\r\n      return true;\r\n    }\r\n\r\n    // Prevent hiding for excluded URI schemes\r\n    if (state.activeEditorScheme && this.isSchemeExcluded(state.activeEditorScheme)) {\r\n      return true;\r\n    }\r\n\r\n    // Prevent hiding when Copilot Chat is active\r\n    if (state.isCopilotChatActive) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Check if a specific context condition is active\r\n   */\r\n  public isContextActive(condition: keyof ContextState): boolean {\r\n    return Boolean(this._currentState[condition]);\r\n  }\r\n\r\n  /**\r\n   * Get the current active editor's URI scheme\r\n   */\r\n  public getActiveEditorScheme(): string | null {\r\n    return this._currentState.activeEditorScheme;\r\n  }\r\n\r\n  /**\r\n   * Update user activity timestamp\r\n   */\r\n  public updateActivity(): void {\r\n    this.updateState({ lastUserActivity: Date.now() });\r\n  }\r\n\r\n  /**\r\n   * Dispose of resources\r\n   */\r\n  public dispose(): void {\r\n    this._disposables.forEach(d => d.dispose());\r\n    this._disposables = [];\r\n    this._onContextChanged.dispose();\r\n  }\r\n\r\n  /**\r\n   * Create the initial context state\r\n   */\r\n  private createInitialState(): ContextState {\r\n    const activeEditor = vscode.window.activeTextEditor;\r\n    \r\n    return {\r\n      isDebugging: vscode.debug.activeDebugSession !== undefined,\r\n      isSelectingText: this.checkTextSelection(),\r\n      isCopilotChatActive: this.checkCopilotChatActive(),\r\n      activeEditorScheme: activeEditor?.document.uri.scheme || null,\r\n      lastUserActivity: Date.now(),\r\n      isInTextEditor: activeEditor !== undefined,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Set up event listeners for context changes\r\n   */\r\n  private setupEventListeners(): void {\r\n    // Debug session changes\r\n    this._disposables.push(\r\n      vscode.debug.onDidStartDebugSession(() => {\r\n        this.updateState({ isDebugging: true });\r\n      }),\r\n      vscode.debug.onDidTerminateDebugSession(() => {\r\n        this.updateState({ isDebugging: vscode.debug.activeDebugSession !== undefined });\r\n      })\r\n    );\r\n\r\n    // Text selection changes\r\n    this._disposables.push(\r\n      vscode.window.onDidChangeTextEditorSelection(() => {\r\n        this.updateState({ \r\n          isSelectingText: this.checkTextSelection(),\r\n          lastUserActivity: Date.now()\r\n        });\r\n      })\r\n    );\r\n\r\n    // Active editor changes\r\n    this._disposables.push(\r\n      vscode.window.onDidChangeActiveTextEditor((editor) => {\r\n        this.updateState({ \r\n          activeEditorScheme: editor?.document.uri.scheme || null,\r\n          isSelectingText: this.checkTextSelection(),\r\n          isInTextEditor: editor !== undefined,\r\n          lastUserActivity: Date.now()\r\n        });\r\n      })\r\n    );\r\n\r\n    // Document changes (activity tracking)\r\n    this._disposables.push(\r\n      vscode.workspace.onDidChangeTextDocument(() => {\r\n        this.updateState({ lastUserActivity: Date.now() });\r\n      })\r\n    );\r\n\r\n    // Window focus changes\r\n    this._disposables.push(\r\n      vscode.window.onDidChangeWindowState((state) => {\r\n        if (state.focused) {\r\n          this.updateState({ lastUserActivity: Date.now() });\r\n        }\r\n      })\r\n    );\r\n\r\n    // Terminal changes (activity tracking)\r\n    this._disposables.push(\r\n      vscode.window.onDidChangeActiveTerminal(() => {\r\n        this.updateState({ lastUserActivity: Date.now() });\r\n      })\r\n    );\r\n\r\n    // Monitor for Copilot Chat changes\r\n    this.setupCopilotChatMonitoring();\r\n  }\r\n\r\n  /**\r\n   * Set up monitoring for Copilot Chat activity\r\n   */\r\n  private setupCopilotChatMonitoring(): void {\r\n    // Poll for Copilot Chat activity every 2 seconds\r\n    const pollInterval = 2000;\r\n    \r\n    const copilotPoller = setInterval(() => {\r\n      const isCopilotActive = this.checkCopilotChatActive();\r\n      if (isCopilotActive !== this._currentState.isCopilotChatActive) {\r\n        this.updateState({ isCopilotChatActive: isCopilotActive });\r\n      }\r\n    }, pollInterval);\r\n\r\n    this._disposables.push({\r\n      dispose: () => clearInterval(copilotPoller)\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Check if there's currently selected text\r\n   */\r\n  private checkTextSelection(): boolean {\r\n    const activeEditor = vscode.window.activeTextEditor;\r\n    if (!activeEditor) {\r\n      return false;\r\n    }\r\n\r\n    return activeEditor.selections.some(selection => !selection.isEmpty);\r\n  }\r\n\r\n  /**\r\n   * Check if Copilot Chat is currently active\r\n   */\r\n  private checkCopilotChatActive(): boolean {\r\n    try {\r\n      // Check if Copilot Chat extension is active and has focus\r\n      // This is a heuristic approach since there's no direct API\r\n      const copilotExtension = vscode.extensions.getExtension('GitHub.copilot-chat');\r\n      return copilotExtension?.isActive || false;\r\n    } catch {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if a URI scheme should prevent hiding\r\n   */\r\n  private isSchemeExcluded(scheme: string): boolean {\r\n    // Common schemes that should prevent hiding\r\n    const excludedSchemes = [\r\n      'output',\r\n      'debug',\r\n      'search-editor',\r\n      'interactive',\r\n      'notebook-cell',\r\n      'vscode-terminal'\r\n    ];\r\n\r\n    return excludedSchemes.includes(scheme);\r\n  }\r\n\r\n  /**\r\n   * Update the context state and notify listeners\r\n   */\r\n  private updateState(updates: Partial<ContextState>): void {\r\n    const oldState = this._currentState;\r\n    this._currentState = { ...oldState, ...updates };\r\n\r\n    // Only fire event if state actually changed\r\n    if (this.hasStateChanged(oldState, this._currentState)) {\r\n      this._onContextChanged.fire(this._currentState);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if the context state has meaningfully changed\r\n   */\r\n  private hasStateChanged(oldState: ContextState, newState: ContextState): boolean {\r\n    // Compare all properties except lastUserActivity for meaningful changes\r\n    const significantKeys: (keyof ContextState)[] = [\r\n      'isDebugging',\r\n      'isSelectingText',\r\n      'isCopilotChatActive',\r\n      'activeEditorScheme',\r\n      'isInTextEditor'\r\n    ];\r\n\r\n    return significantKeys.some(key => oldState[key] !== newState[key]);\r\n  }\r\n\r\n  /**\r\n   * Get time since last activity in milliseconds\r\n   */\r\n  public getTimeSinceLastActivity(): number {\r\n    return Date.now() - this._currentState.lastUserActivity;\r\n  }\r\n\r\n  /**\r\n   * Check if the user has been inactive for a specified duration\r\n   */\r\n  public isInactive(thresholdMs: number): boolean {\r\n    return this.getTimeSinceLastActivity() > thresholdMs;\r\n  }\r\n\r\n  /**\r\n   * Get a human-readable description of the current context\r\n   */\r\n  public getContextDescription(): string {\r\n    const state = this._currentState;\r\n    const conditions: string[] = [];\r\n\r\n    if (state.isDebugging) conditions.push('debugging');\r\n    if (state.isSelectingText) conditions.push('text selected');\r\n    if (state.isCopilotChatActive) conditions.push('Copilot Chat active');\r\n    if (state.activeEditorScheme && this.isSchemeExcluded(state.activeEditorScheme)) {\r\n      conditions.push(`excluded scheme (${state.activeEditorScheme})`);\r\n    }\r\n    if (!state.isInTextEditor) conditions.push('not in text editor');\r\n\r\n    return conditions.length > 0 \r\n      ? `Active conditions: ${conditions.join(', ')}`\r\n      : 'No blocking conditions';\r\n  }\r\n}", "import * as vscode from 'vscode';\r\nimport { IStatusBarManager, ExtensionConfig, PanelType } from '../types';\r\n\r\n/**\r\n * Manages the status bar integration for the extension\r\n */\r\nexport class StatusBarManager implements IStatusBarManager {\r\n  private _statusBarItem: vscode.StatusBarItem;\r\n  private _disposables: vscode.Disposable[] = [];\r\n\r\n  constructor() {\r\n    this._statusBarItem = vscode.window.createStatusBarItem(\r\n      vscode.StatusBarAlignment.Right,\r\n      100 // Priority\r\n    );\r\n    \r\n    this._statusBarItem.command = 'autoHideEnhanced.toggle.all';\r\n    this._statusBarItem.tooltip = 'Auto Hide Enhanced - Click to toggle all panels';\r\n    \r\n    this._disposables.push(this._statusBarItem);\r\n  }\r\n\r\n  /**\r\n   * Update the status bar display\r\n   */\r\n  public update(hiddenPanels: PanelType[], config: ExtensionConfig): void {\r\n    if (!config.statusBar.enabled) {\r\n      this.hide();\r\n      return;\r\n    }\r\n\r\n    const hiddenCount = hiddenPanels.length;\r\n    const enabledPanels = Object.values(config.panels)\r\n      .filter(panelConfig => panelConfig.enabled)\r\n      .length;\r\n\r\n    // Create status text\r\n    let statusText = '$(eye-closed)';\r\n    \r\n    if (config.statusBar.showCounts) {\r\n      if (hiddenCount === 0) {\r\n        statusText = '$(eye) All Visible';\r\n      } else if (hiddenCount === enabledPanels) {\r\n        statusText = '$(eye-closed) All Hidden';\r\n      } else {\r\n        statusText = `$(eye-closed) ${hiddenCount}/${enabledPanels} Hidden`;\r\n      }\r\n    } else {\r\n      if (hiddenCount === 0) {\r\n        statusText = '$(eye)';\r\n      } else if (hiddenCount === enabledPanels) {\r\n        statusText = '$(eye-closed)';\r\n      } else {\r\n        statusText = '$(eye-closed)';\r\n      }\r\n    }\r\n\r\n    this._statusBarItem.text = statusText;\r\n\r\n    // Update tooltip with detailed information\r\n    const tooltip = this.createTooltip(hiddenPanels, config);\r\n    this._statusBarItem.tooltip = tooltip;\r\n\r\n    // Update color based on state\r\n    if (!config.enabled) {\r\n      this._statusBarItem.color = new vscode.ThemeColor('statusBarItem.warningForeground');\r\n    } else if (hiddenCount > 0) {\r\n      this._statusBarItem.color = new vscode.ThemeColor('statusBarItem.prominentForeground');\r\n    } else {\r\n      this._statusBarItem.color = undefined; // Default color\r\n    }\r\n\r\n    this.show();\r\n  }\r\n\r\n  /**\r\n   * Show the status bar item\r\n   */\r\n  public show(): void {\r\n    this._statusBarItem.show();\r\n  }\r\n\r\n  /**\r\n   * Hide the status bar item\r\n   */\r\n  public hide(): void {\r\n    this._statusBarItem.hide();\r\n  }\r\n\r\n  /**\r\n   * Dispose of resources\r\n   */\r\n  public dispose(): void {\r\n    this._disposables.forEach(d => d.dispose());\r\n    this._disposables = [];\r\n  }\r\n\r\n  /**\r\n   * Create detailed tooltip text\r\n   */\r\n  private createTooltip(hiddenPanels: PanelType[], config: ExtensionConfig): string {\r\n    const lines: string[] = ['Auto Hide Enhanced'];\r\n    \r\n    if (!config.enabled) {\r\n      lines.push('Status: Disabled');\r\n      lines.push('Click to enable');\r\n      return lines.join('\\n');\r\n    }\r\n\r\n    lines.push('Status: Enabled');\r\n    lines.push('');\r\n\r\n    // Panel status\r\n    const panelStatus: string[] = [];\r\n    for (const [panelType, panelConfig] of Object.entries(config.panels)) {\r\n      if (!panelConfig.enabled) {\r\n        continue;\r\n      }\r\n\r\n      const isHidden = hiddenPanels.includes(panelType as PanelType);\r\n      const status = isHidden ? '$(eye-closed)' : '$(eye)';\r\n      const name = this.getPanelDisplayName(panelType as PanelType);\r\n      panelStatus.push(`${status} ${name}`);\r\n    }\r\n\r\n    if (panelStatus.length > 0) {\r\n      lines.push('Panel Status:');\r\n      lines.push(...panelStatus);\r\n      lines.push('');\r\n    }\r\n\r\n    // Smart features status\r\n    const smartFeatures: string[] = [];\r\n    if (config.smart.respectDebugSessions) {\r\n      smartFeatures.push('$(debug) Debug-aware');\r\n    }\r\n    if (config.smart.respectTextSelection) {\r\n      smartFeatures.push('$(selection) Selection-aware');\r\n    }\r\n    if (config.smart.excludedSchemes.length > 0) {\r\n      smartFeatures.push('$(filter) Scheme filtering');\r\n    }\r\n\r\n    if (smartFeatures.length > 0) {\r\n      lines.push('Smart Features:');\r\n      lines.push(...smartFeatures);\r\n      lines.push('');\r\n    }\r\n\r\n    lines.push('Click to toggle all panels');\r\n    lines.push('Right-click for more options');\r\n\r\n    return lines.join('\\n');\r\n  }\r\n\r\n  /**\r\n   * Get display name for a panel type\r\n   */\r\n  private getPanelDisplayName(panelType: PanelType): string {\r\n    switch (panelType) {\r\n      case PanelType.SIDEBAR:\r\n        return 'Sidebar';\r\n      case PanelType.AUXILIARY_BAR:\r\n        return 'Auxiliary Bar';\r\n      case PanelType.PANEL:\r\n        return 'Panel';\r\n      case PanelType.REFERENCES:\r\n        return 'References';\r\n      case PanelType.COPILOT_CHAT:\r\n        return 'Copilot Chat';\r\n      default:\r\n        return panelType;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update the status bar command\r\n   */\r\n  public setCommand(command: string): void {\r\n    this._statusBarItem.command = command;\r\n  }\r\n\r\n  /**\r\n   * Set custom text for the status bar\r\n   */\r\n  public setText(text: string): void {\r\n    this._statusBarItem.text = text;\r\n  }\r\n\r\n  /**\r\n   * Set custom tooltip for the status bar\r\n   */\r\n  public setTooltip(tooltip: string): void {\r\n    this._statusBarItem.tooltip = tooltip;\r\n  }\r\n\r\n  /**\r\n   * Set the color of the status bar item\r\n   */\r\n  public setColor(color: string | vscode.ThemeColor | undefined): void {\r\n    this._statusBarItem.color = color;\r\n  }\r\n\r\n  /**\r\n   * Get the current status bar item (for advanced customization)\r\n   */\r\n  public getStatusBarItem(): vscode.StatusBarItem {\r\n    return this._statusBarItem;\r\n  }\r\n}", "import * as vscode from 'vscode';\r\nimport { IPanelController, PanelType, ContextState, PanelStateChangeEvent } from '../types';\r\n\r\n/**\r\n * Base class for panel controllers with common functionality\r\n */\r\nexport abstract class BasePanelController implements IPanelController {\r\n  private readonly _onStateChanged = new vscode.EventEmitter<PanelStateChangeEvent>();\r\n  public readonly onStateChanged = this._onStateChanged.event;\r\n\r\n  protected _disposables: vscode.Disposable[] = [];\r\n  protected _isHidden = false;\r\n  protected _hideTimeout: NodeJS.Timeout | undefined;\r\n\r\n  constructor(public readonly panelType: PanelType) {\r\n    this._disposables.push(this._onStateChanged);\r\n  }\r\n\r\n  /**\r\n   * Whether the panel is currently hidden\r\n   */\r\n  public get isHidden(): boolean {\r\n    return this._isHidden;\r\n  }\r\n\r\n  /**\r\n   * Hide the panel\r\n   */\r\n  public async hide(): Promise<void> {\r\n    if (this._isHidden) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await this.executeHideCommand();\r\n      this._isHidden = true;\r\n      this.emitStateChange('user_action');\r\n    } catch (error) {\r\n      console.error(`Failed to hide ${this.panelType}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Show the panel\r\n   */\r\n  public async show(): Promise<void> {\r\n    if (!this._isHidden) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await this.executeShowCommand();\r\n      this._isHidden = false;\r\n      this.emitStateChange('user_action');\r\n    } catch (error) {\r\n      console.error(`Failed to show ${this.panelType}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggle the panel visibility\r\n   */\r\n  public async toggle(): Promise<void> {\r\n    if (this._isHidden) {\r\n      await this.show();\r\n    } else {\r\n      await this.hide();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if the panel can be hidden in the current context\r\n   */\r\n  public canHide(context: ContextState): boolean {\r\n    // Default implementation - can be overridden by specific controllers\r\n    return !context.isDebugging && !context.isSelectingText;\r\n  }\r\n\r\n  /**\r\n   * Hide the panel with a delay\r\n   */\r\n  public async hideWithDelay(delayMs: number, context: ContextState): Promise<void> {\r\n    // Clear any existing timeout\r\n    this.clearHideTimeout();\r\n\r\n    if (delayMs <= 0) {\r\n      if (this.canHide(context)) {\r\n        await this.hide();\r\n      }\r\n      return;\r\n    }\r\n\r\n    this._hideTimeout = setTimeout(async () => {\r\n      try {\r\n        // Re-check context before hiding (it might have changed)\r\n        if (this.canHide(context)) {\r\n          await this.hide();\r\n          this.emitStateChange('auto_hide');\r\n        }\r\n      } catch (error) {\r\n        console.error(`Failed to auto-hide ${this.panelType}:`, error);\r\n      }\r\n    }, delayMs);\r\n  }\r\n\r\n  /**\r\n   * Cancel any pending hide operation\r\n   */\r\n  public cancelHide(): void {\r\n    this.clearHideTimeout();\r\n  }\r\n\r\n  /**\r\n   * Dispose of resources\r\n   */\r\n  public dispose(): void {\r\n    this.clearHideTimeout();\r\n    this._disposables.forEach(d => d.dispose());\r\n    this._disposables = [];\r\n  }\r\n\r\n  /**\r\n   * Execute the VSCode command to hide this panel type\r\n   */\r\n  protected abstract executeHideCommand(): Promise<void>;\r\n\r\n  /**\r\n   * Execute the VSCode command to show this panel type\r\n   */\r\n  protected abstract executeShowCommand(): Promise<void>;\r\n\r\n  /**\r\n   * Clear any pending hide timeout\r\n   */\r\n  private clearHideTimeout(): void {\r\n    if (this._hideTimeout) {\r\n      clearTimeout(this._hideTimeout);\r\n      this._hideTimeout = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Emit a state change event\r\n   */\r\n  private emitStateChange(reason: PanelStateChangeEvent['reason']): void {\r\n    const event: PanelStateChangeEvent = {\r\n      panelType: this.panelType,\r\n      isHidden: this._isHidden,\r\n      timestamp: Date.now(),\r\n      reason,\r\n    };\r\n\r\n    this._onStateChanged.fire(event);\r\n  }\r\n\r\n  /**\r\n   * Update the hidden state without triggering commands (for external state changes)\r\n   */\r\n  protected updateHiddenState(isHidden: boolean, reason: PanelStateChangeEvent['reason'] = 'user_action'): void {\r\n    if (this._isHidden !== isHidden) {\r\n      this._isHidden = isHidden;\r\n      this.emitStateChange(reason);\r\n    }\r\n  }\r\n}", "import * as vscode from 'vscode';\r\nimport { PanelType, ContextState, VSCODE_COMMANDS } from '../types';\r\nimport { BasePanelController } from './BasePanelController';\r\n\r\n/**\r\n * Controller for the sidebar panel\r\n */\r\nexport class SidebarController extends BasePanelController {\r\n  constructor() {\r\n    super(PanelType.SIDEBAR);\r\n    this.setupEventListeners();\r\n  }\r\n\r\n  /**\r\n   * Check if the sidebar can be hidden in the current context\r\n   */\r\n  public override canHide(context: ContextState): boolean {\r\n    // Don't hide sidebar during debugging or text selection\r\n    if (context.isDebugging || context.isSelectingText) {\r\n      return false;\r\n    }\r\n\r\n    // Don't hide if Copilot Chat is active (might be in sidebar)\r\n    if (context.isCopilotChatActive) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Execute the VSCode command to hide the sidebar\r\n   */\r\n  protected async executeHideCommand(): Promise<void> {\r\n    await vscode.commands.executeCommand(VSCODE_COMMANDS.CLOSE_SIDEBAR);\r\n  }\r\n\r\n  /**\r\n   * Execute the VSCode command to show the sidebar\r\n   */\r\n  protected async executeShowCommand(): Promise<void> {\r\n    await vscode.commands.executeCommand(VSCODE_COMMANDS.TOGGLE_SIDEBAR);\r\n  }\r\n\r\n  /**\r\n   * Set up event listeners for sidebar state changes\r\n   */\r\n  private setupEventListeners(): void {\r\n    // Listen for sidebar visibility changes\r\n    // Note: VSCode doesn't provide direct events for sidebar visibility\r\n    // We'll use a polling approach to detect changes\r\n    const pollInterval = 1000; // 1 second\r\n\r\n    const visibilityPoller = setInterval(() => {\r\n      this.checkSidebarVisibility();\r\n    }, pollInterval);\r\n\r\n    this._disposables.push({\r\n      dispose: () => clearInterval(visibilityPoller)\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Check current sidebar visibility and update state\r\n   */\r\n  private async checkSidebarVisibility(): Promise<void> {\r\n    try {\r\n      // Use a heuristic to determine sidebar visibility\r\n      // This is not perfect but works in most cases\r\n      const isSidebarVisible = await this.isSidebarVisible();\r\n      this.updateHiddenState(!isSidebarVisible);\r\n    } catch (error) {\r\n      // Silently handle errors in visibility checking\r\n      console.debug('Error checking sidebar visibility:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Heuristic to determine if sidebar is visible\r\n   */\r\n  private async isSidebarVisible(): Promise<boolean> {\r\n    try {\r\n      // Try to execute a sidebar-specific command that only works when visible\r\n      // This is a workaround since VSCode doesn't expose sidebar visibility directly\r\n      const result = await vscode.commands.executeCommand('workbench.action.focusSideBar');\r\n      return result !== undefined;\r\n    } catch {\r\n      // If command fails, assume sidebar is not visible\r\n      return false;\r\n    }\r\n  }\r\n}", "import * as vscode from 'vscode';\r\nimport { PanelType, ContextState, VSCODE_COMMANDS } from '../types';\r\nimport { BasePanelController } from './BasePanelController';\r\n\r\n/**\r\n * Controller for the bottom panel (terminal, problems, output, etc.)\r\n */\r\nexport class PanelController extends BasePanelController {\r\n  constructor() {\r\n    super(PanelType.PANEL);\r\n    this.setupEventListeners();\r\n  }\r\n\r\n  /**\r\n   * Check if the panel can be hidden in the current context\r\n   */\r\n  public override canHide(context: ContextState): boolean {\r\n    // Don't hide panel during debugging (might contain debug console)\r\n    if (context.isDebugging) {\r\n      return false;\r\n    }\r\n\r\n    // Don't hide if text is being selected (user might be copying from terminal/output)\r\n    if (context.isSelectingText) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Execute the VSCode command to hide the panel\r\n   */\r\n  protected async executeHideCommand(): Promise<void> {\r\n    await vscode.commands.executeCommand(VSCODE_COMMANDS.CLOSE_PANEL);\r\n  }\r\n\r\n  /**\r\n   * Execute the VSCode command to show the panel\r\n   */\r\n  protected async executeShowCommand(): Promise<void> {\r\n    await vscode.commands.executeCommand(VSCODE_COMMANDS.TOGGLE_PANEL);\r\n  }\r\n\r\n  /**\r\n   * Set up event listeners for panel state changes\r\n   */\r\n  private setupEventListeners(): void {\r\n    // Listen for terminal changes (indicates panel activity)\r\n    this._disposables.push(\r\n      vscode.window.onDidChangeActiveTerminal(() => {\r\n        // Panel is likely visible if terminal changed\r\n        this.updateHiddenState(false);\r\n      })\r\n    );\r\n\r\n    // Poll for panel visibility\r\n    const pollInterval = 1000; // 1 second\r\n    const visibilityPoller = setInterval(() => {\r\n      this.checkPanelVisibility();\r\n    }, pollInterval);\r\n\r\n    this._disposables.push({\r\n      dispose: () => clearInterval(visibilityPoller)\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Check current panel visibility and update state\r\n   */\r\n  private async checkPanelVisibility(): Promise<void> {\r\n    try {\r\n      const isPanelVisible = await this.isPanelVisible();\r\n      this.updateHiddenState(!isPanelVisible);\r\n    } catch (error) {\r\n      console.debug('Error checking panel visibility:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Heuristic to determine if panel is visible\r\n   */\r\n  private async isPanelVisible(): Promise<boolean> {\r\n    try {\r\n      // Try to focus the panel - if it works, panel is visible\r\n      const result = await vscode.commands.executeCommand('workbench.action.focusPanel');\r\n      return result !== undefined;\r\n    } catch {\r\n      return false;\r\n    }\r\n  }\r\n}", "import * as vscode from 'vscode';\r\nimport { PanelType, ContextState, VSCODE_COMMANDS } from '../types';\r\nimport { BasePanelController } from './BasePanelController';\r\n\r\n/**\r\n * Controller for the auxiliary bar (secondary sidebar)\r\n */\r\nexport class AuxiliaryBarController extends BasePanelController {\r\n  constructor() {\r\n    super(PanelType.AUXILIARY_BAR);\r\n    this.setupEventListeners();\r\n  }\r\n\r\n  /**\r\n   * Check if the auxiliary bar can be hidden in the current context\r\n   */\r\n  public override canHide(context: ContextState): boolean {\r\n    // Don't hide during debugging or text selection\r\n    if (context.isDebugging || context.isSelectingText) {\r\n      return false;\r\n    }\r\n\r\n    // Don't hide if Copilot Chat is active (might be in auxiliary bar)\r\n    if (context.isCopilotChatActive) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Execute the VSCode command to hide the auxiliary bar\r\n   */\r\n  protected async executeHideCommand(): Promise<void> {\r\n    await vscode.commands.executeCommand(VSCODE_COMMANDS.CLOSE_AUXILIARY_BAR);\r\n  }\r\n\r\n  /**\r\n   * Execute the VSCode command to show the auxiliary bar\r\n   */\r\n  protected async executeShowCommand(): Promise<void> {\r\n    await vscode.commands.executeCommand(VSCODE_COMMANDS.TOGGLE_AUXILIARY_BAR);\r\n  }\r\n\r\n  /**\r\n   * Set up event listeners for auxiliary bar state changes\r\n   */\r\n  private setupEventListeners(): void {\r\n    // Poll for auxiliary bar visibility\r\n    const pollInterval = 1000; // 1 second\r\n    const visibilityPoller = setInterval(() => {\r\n      this.checkAuxiliaryBarVisibility();\r\n    }, pollInterval);\r\n\r\n    this._disposables.push({\r\n      dispose: () => clearInterval(visibilityPoller)\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Check current auxiliary bar visibility and update state\r\n   */\r\n  private async checkAuxiliaryBarVisibility(): Promise<void> {\r\n    try {\r\n      const isAuxiliaryBarVisible = await this.isAuxiliaryBarVisible();\r\n      this.updateHiddenState(!isAuxiliaryBarVisible);\r\n    } catch (error) {\r\n      console.debug('Error checking auxiliary bar visibility:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Heuristic to determine if auxiliary bar is visible\r\n   */\r\n  private async isAuxiliaryBarVisible(): Promise<boolean> {\r\n    try {\r\n      // Try to focus the auxiliary bar - if it works, it's visible\r\n      const result = await vscode.commands.executeCommand('workbench.action.focusAuxiliaryBar');\r\n      return result !== undefined;\r\n    } catch {\r\n      return false;\r\n    }\r\n  }\r\n}", "import * as vscode from 'vscode';\r\nimport { PanelType, ContextState, VSCODE_COMMANDS } from '../types';\r\nimport { BasePanelController } from './BasePanelController';\r\n\r\n/**\r\n * Controller for the references panel (peek references, find all references)\r\n */\r\nexport class ReferencesController extends BasePanelController {\r\n  constructor() {\r\n    super(PanelType.REFERENCES);\r\n    this.setupEventListeners();\r\n  }\r\n\r\n  /**\r\n   * Check if the references panel can be hidden in the current context\r\n   */\r\n  public override canHide(context: ContextState): boolean {\r\n    // Don't hide during debugging\r\n    if (context.isDebugging) {\r\n      return false;\r\n    }\r\n\r\n    // Don't hide when text is selected (user might be reviewing references)\r\n    if (context.isSelectingText) {\r\n      return false;\r\n    }\r\n\r\n    // Don't hide if we're in a search editor (references might be displayed there)\r\n    if (context.activeEditorScheme === 'search-editor') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Execute the VSCode command to hide the references panel\r\n   */\r\n  protected async executeHideCommand(): Promise<void> {\r\n    await vscode.commands.executeCommand(VSCODE_COMMANDS.CLOSE_REFERENCE_SEARCH);\r\n  }\r\n\r\n  /**\r\n   * Execute the VSCode command to show the references panel\r\n   */\r\n  protected async executeShowCommand(): Promise<void> {\r\n    // References panel doesn't have a direct \"show\" command\r\n    // It's typically shown when finding references\r\n    // For now, we'll try to trigger a references search if there's an active editor\r\n    const activeEditor = vscode.window.activeTextEditor;\r\n    if (activeEditor) {\r\n      await vscode.commands.executeCommand('editor.action.goToReferences');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set up event listeners for references panel state changes\r\n   */\r\n  private setupEventListeners(): void {\r\n    // Listen for reference search events\r\n    this._disposables.push(\r\n      vscode.window.onDidChangeActiveTextEditor(() => {\r\n        // Check if we switched to a references editor\r\n        this.checkReferencesVisibility();\r\n      })\r\n    );\r\n\r\n    // Poll for references visibility (less frequently since it's more transient)\r\n    const pollInterval = 2000; // 2 seconds\r\n    const visibilityPoller = setInterval(() => {\r\n      this.checkReferencesVisibility();\r\n    }, pollInterval);\r\n\r\n    this._disposables.push({\r\n      dispose: () => clearInterval(visibilityPoller)\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Check current references panel visibility and update state\r\n   */\r\n  private async checkReferencesVisibility(): Promise<void> {\r\n    try {\r\n      const isReferencesVisible = await this.isReferencesVisible();\r\n      this.updateHiddenState(!isReferencesVisible);\r\n    } catch (error) {\r\n      console.debug('Error checking references visibility:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Heuristic to determine if references panel is visible\r\n   */\r\n  private async isReferencesVisible(): Promise<boolean> {\r\n    try {\r\n      const activeEditor = vscode.window.activeTextEditor;\r\n      if (!activeEditor) {\r\n        return false;\r\n      }\r\n\r\n      // Check if the active editor is a references editor\r\n      const uri = activeEditor.document.uri;\r\n      if (uri.scheme === 'references' || uri.path.includes('references')) {\r\n        return true;\r\n      }\r\n\r\n      // Check if peek references is active by trying to close it\r\n      // This is a bit hacky but works as a detection method\r\n      const result = await vscode.commands.executeCommand('closeReferenceSearch');\r\n      return result !== undefined;\r\n    } catch {\r\n      return false;\r\n    }\r\n  }\r\n}", "import * as vscode from 'vscode';\r\nimport { PanelType, ContextState } from '../types';\r\nimport { BasePanelController } from './BasePanelController';\r\n\r\n/**\r\n * Controller for the Copilot Chat panel\r\n */\r\nexport class CopilotChatController extends BasePanelController {\r\n  private copilotExtension: vscode.Extension<any> | undefined;\r\n\r\n  constructor() {\r\n    super(PanelType.COPILOT_CHAT);\r\n    this.copilotExtension = vscode.extensions.getExtension('GitHub.copilot-chat');\r\n    this.setupEventListeners();\r\n  }\r\n\r\n  /**\r\n   * Check if the Copilot Chat panel can be hidden in the current context\r\n   */\r\n  public override canHide(context: ContextState): boolean {\r\n    // Never hide if Copilot Chat is actively being used\r\n    if (context.isCopilotChatActive) {\r\n      return false;\r\n    }\r\n\r\n    // Don't hide during debugging (user might be asking for debugging help)\r\n    if (context.isDebugging) {\r\n      return false;\r\n    }\r\n\r\n    // Don't hide when text is selected (user might want to ask about selected code)\r\n    if (context.isSelectingText) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Execute the VSCode command to hide the Copilot Chat panel\r\n   */\r\n  protected async executeHideCommand(): Promise<void> {\r\n    try {\r\n      // Try different commands that might hide Copilot Chat\r\n      await vscode.commands.executeCommand('github.copilot.chat.close');\r\n    } catch {\r\n      try {\r\n        // Alternative command\r\n        await vscode.commands.executeCommand('workbench.action.chat.close');\r\n      } catch {\r\n        // If specific commands don't work, try generic panel close\r\n        await vscode.commands.executeCommand('workbench.action.closePanel');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Execute the VSCode command to show the Copilot Chat panel\r\n   */\r\n  protected async executeShowCommand(): Promise<void> {\r\n    try {\r\n      // Try to open Copilot Chat\r\n      await vscode.commands.executeCommand('github.copilot.chat.open');\r\n    } catch {\r\n      try {\r\n        // Alternative command\r\n        await vscode.commands.executeCommand('workbench.action.chat.open');\r\n      } catch {\r\n        // If Copilot Chat commands don't work, show a message\r\n        vscode.window.showWarningMessage(\r\n          'Copilot Chat extension may not be installed or enabled. Please install GitHub Copilot Chat extension.'\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if Copilot Chat extension is available\r\n   */\r\n  public isCopilotChatAvailable(): boolean {\r\n    return this.copilotExtension?.isActive || false;\r\n  }\r\n\r\n  /**\r\n   * Set up event listeners for Copilot Chat state changes\r\n   */\r\n  private setupEventListeners(): void {\r\n    // Listen for extension activation changes\r\n    this._disposables.push(\r\n      vscode.extensions.onDidChange(() => {\r\n        this.copilotExtension = vscode.extensions.getExtension('GitHub.copilot-chat');\r\n      })\r\n    );\r\n\r\n    // Poll for Copilot Chat visibility\r\n    const pollInterval = 2000; // 2 seconds (less frequent since it's more specialized)\r\n    const visibilityPoller = setInterval(() => {\r\n      this.checkCopilotChatVisibility();\r\n    }, pollInterval);\r\n\r\n    this._disposables.push({\r\n      dispose: () => clearInterval(visibilityPoller)\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Check current Copilot Chat visibility and update state\r\n   */\r\n  private async checkCopilotChatVisibility(): Promise<void> {\r\n    try {\r\n      const isCopilotChatVisible = await this.isCopilotChatVisible();\r\n      this.updateHiddenState(!isCopilotChatVisible);\r\n    } catch (error) {\r\n      console.debug('Error checking Copilot Chat visibility:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Heuristic to determine if Copilot Chat is visible\r\n   */\r\n  private async isCopilotChatVisible(): Promise<boolean> {\r\n    try {\r\n      // If extension is not available, it can't be visible\r\n      if (!this.isCopilotChatAvailable()) {\r\n        return false;\r\n      }\r\n\r\n      // Try to focus Copilot Chat - if it works, it's visible\r\n      const result = await vscode.commands.executeCommand('github.copilot.chat.focus');\r\n      return result !== undefined;\r\n    } catch {\r\n      try {\r\n        // Alternative method: check if chat view is active\r\n        const result = await vscode.commands.executeCommand('workbench.action.chat.focus');\r\n        return result !== undefined;\r\n      } catch {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get Copilot Chat extension information\r\n   */\r\n  public getCopilotChatInfo(): { available: boolean; version?: string } {\r\n    if (!this.copilotExtension) {\r\n      return { available: false };\r\n    }\r\n\r\n    return {\r\n      available: this.copilotExtension.isActive,\r\n      version: this.copilotExtension.packageJSON?.version,\r\n    };\r\n  }\r\n}"],
  "mappings": "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",
  "names": ["vscode", "vscode", "vscode", "vscode", "vscode", "vscode", "vscode", "vscode", "vscode", "vscode", "commands"]
}
